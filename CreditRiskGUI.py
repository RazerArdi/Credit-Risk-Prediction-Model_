"""
# Modern Credit Risk Prediction GUI
**Author**: Bayu Ardiyansyah  
**Date**: May 2025  
**Objective**: Provide a modern, user-friendly graphical interface for loan officers to predict credit risk (GOOD or BAD) using trained machine learning models (Logistic Regression, Random Forest, XGBoost).

## Overview
This GUI, built with `customtkinter`, offers a sleek interface with dark/light theme support. It allows users to:
- Select a model (Logistic Regression, Random Forest, XGBoost).
- Input loan applicant details (loan amount, interest rate, annual income, debt-to-income ratio, loan grade, loan term).
- Load an example usage case.
- Clear all inputs.
- Toggle between dark and light themes.
- View predictions and BAD probability.
The GUI loads models and preprocessing objects from the `Model` directory, generated by `CreditScore.ipynb`. Missing features are imputed with median (numerical) or mode (categorical) values.

## Features
- **Inputs**:
  - Numerical: Loan Amount (USD), Interest Rate (%), Annual Income (USD), Debt-to-Income Ratio (%).
  - Categorical: Loan Grade (Aâ€“G), Loan Term (' 36 months' or ' 60 months', with leading space).
- **Model Selection**: Dropdown for Logistic Regression, Random Forest, or XGBoost.
- **Example Usage**: "Load Example" populates:
  - Loan Amount: 10,000 USD
  - Interest Rate: 10.99%
  - Annual Income: 50,000 USD
  - Debt-to-Income Ratio: 15.0%
  - Loan Grade: C
  - Loan Term: ' 36 months'
  - Model: Random Forest
- **Clear Inputs**: Reset fields and output.
- **Theme Toggle**: Switch between dark and light modes.
- **Output**: Prediction (GOOD or BAD) and BAD probability (%).
- **Error Handling**: Detailed errors for missing files or invalid inputs.
- **Feature Imputation**: Missing features imputed with training data values.

## Requirements
- Python packages: `customtkinter`, `pandas`, `numpy`, `joblib`, `scikit-learn`, `xgboost`.
- Install via: `pip install customtkinter pandas numpy joblib scikit-learn xgboost`

## Usage
1. Run `CreditScore.ipynb` to generate required files in the `Model` directory:
   - `Model/logistic_regression_model.pkl`
   - `Model/random_forest_model.pkl`
   - `Model/xgboost_model.pkl`
   - `Model/scaler.pkl`
   - `Model/label_encoder_grade.pkl`
   - `Model/label_encoder_term.pkl`
   - `Model/feature_names.pkl`
   - `Model/imputation_values.pkl`
2. Ensure files are in `Model/` or move them to the working directory.
3. Run the script: `python CreditRiskGUI.py`
4. Toggle theme if desired.
5. Enter details or click "Load Example".
6. Select a model and click "Predict".
7. Click "Clear Inputs" to reset.

## Troubleshooting
- **Error: "Missing files: ..."**:
  - Rerun `CreditScore.ipynb` to generate missing `.pkl` files.
  - Check the `Model` directory for all required files.
  - Alternatively, move `.pkl` files to the working directory:
    ```bash
    mv Model/*.pkl .
    ```
    Then modify `required_files` to remove `Model/` prefix.
- **Error: "'CreditRiskGUI' object has no attribute 'le_grade'"**:
  - Ensure `Model/label_encoder_grade.pkl` exists and is not corrupted.
  - Verify `CreditScore.ipynb` generated all preprocessing files.
  - Rerun the notebook and check the `Model` directory.
- **File Path Issues**:
  - Run the GUI from `/mnt/d/PROJECT/IdxPartnersProject-DataScientist` with `Model/` present.
  - Verify file names (e.g., `logistic_regression_model.pkl`, not `Logistic_Regression_Model.pkl`).
- **Invalid Input Errors**: Ensure numerical fields are valid and dropdowns selected.

## Limitations
- Collects a subset of features; others are imputed, potentially affecting accuracy.
- Inputs must match model expectations (e.g., ' 36 months' for term).
- Single predictions only.
- Requires `customtkinter`.
"""

import customtkinter as ctk
import pandas as pd
import numpy as np
import joblib
from tkinter import messagebox
import os

# Set default appearance
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class CreditRiskGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Credit Risk Prediction")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        
        # Required files with Model/ prefix
        self.required_files = {
            'Logistic Regression': os.path.join('Model', 'logistic_regression_model.pkl'),
            'Random Forest': os.path.join('Model', 'random_forest_model.pkl'),
            'XGBoost': os.path.join('Model', 'xgboost_model.pkl'),
            'Scaler': os.path.join('Model', 'scaler.pkl'),
            'Label Encoder Grade': os.path.join('Model', 'label_encoder_grade.pkl'),
            'Label Encoder Term': os.path.join('Model', 'label_encoder_term.pkl'),
            'Feature Names': os.path.join('Model', 'feature_names.pkl'),
            'Imputation Values': os.path.join('Model', 'imputation_values.pkl')
        }
        
        # Load models and preprocessing objects
        self.models = {}
        missing_files = []
        try:
            # Load models
            for model_name, file_path in list(self.required_files.items())[:3]:
                if not os.path.exists(file_path):
                    missing_files.append(file_path)
                else:
                    self.models[model_name] = joblib.load(file_path)
            
            # Load preprocessing objects explicitly
            for obj_name, file_path in list(self.required_files.items())[3:]:
                if not os.path.exists(file_path):
                    missing_files.append(file_path)
                else:
                    if obj_name == 'Scaler':
                        self.scaler = joblib.load(file_path)
                    elif obj_name == 'Label Encoder Grade':
                        self.le_grade = joblib.load(file_path)
                    elif obj_name == 'Label Encoder Term':
                        self.le_term = joblib.load(file_path)
                    elif obj_name == 'Feature Names':
                        self.feature_names = joblib.load(file_path)
                    elif obj_name == 'Imputation Values':
                        self.imputation_values = joblib.load(file_path)
            
            if missing_files:
                raise FileNotFoundError(f"Missing files: {', '.join(missing_files)}")
            
            if not self.models:
                raise ValueError("No models loaded. At least one model is required.")
            
            # Verify required attributes
            required_attrs = ['scaler', 'le_grade', 'le_term', 'feature_names', 'imputation_values']
            missing_attrs = [attr for attr in required_attrs if not hasattr(self, attr)]
            if missing_attrs:
                raise AttributeError(f"Failed to load preprocessing objects: missing {', '.join(missing_attrs)}")
        
        except FileNotFoundError as e:
            messagebox.showerror(
                "Error",
                f"{str(e)}. Please run CreditScore.ipynb to generate all required files:\n" +
                "\n".join(f"- {f}" for f in self.required_files.values()) +
                "\nEnsure files are in the Model/ directory or move them to the working directory."
            )
            self.root.destroy()
            return
        except AttributeError as e:
            messagebox.showerror(
                "Error",
                f"Preprocessing error: {str(e)}. Ensure all preprocessing files are valid in Model/."
            )
            self.root.destroy()
            return
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load files: {str(e)}")
            self.root.destroy()
            return
        
        # Define GUI input features
        self.gui_features = ['loan_amnt', 'int_rate', 'annual_inc', 'dti', 'grade', 'term']
        
        # Create GUI elements
        self.create_widgets()
        
    def create_widgets(self):
        # Main frame
        main_frame = ctk.CTkFrame(self.root, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)
        
        # Header: Title and theme switch
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(
            header_frame, 
            text="Credit Risk Prediction", 
            font=ctk.CTkFont("Roboto", 24, weight="bold")
        ).pack(side="left")
        
        theme_switch = ctk.CTkSwitch(
            header_frame, 
            text="Light Mode", 
            command=self.toggle_theme,
            font=ctk.CTkFont("Roboto", 12)
        )
        theme_switch.pack(side="right")
        
        # Instructions
        ctk.CTkLabel(
            main_frame, 
            text="Enter loan applicant details or load an example, then select a model to predict credit risk.",
            font=ctk.CTkFont("Roboto", 12),
            wraplength=600
        ).pack(pady=10)
        
        # Input frame
        input_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        input_frame.pack(pady=10, padx=10, fill="x")
        
        # Numerical inputs
        self.entries = {}
        numerical_labels = {
            'loan_amnt': 'Loan Amount (USD):',
            'int_rate': 'Interest Rate (%):',
            'annual_inc': 'Annual Income (USD):',
            'dti': 'Debt-to-Income Ratio (%):'
        }
        
        for idx, (key, label) in enumerate(numerical_labels.items()):
            ctk.CTkLabel(
                input_frame, 
                text=label, 
                font=ctk.CTkFont("Roboto", 12)
            ).grid(row=idx, column=0, padx=10, pady=5, sticky="e")
            entry = ctk.CTkEntry(
                input_frame, 
                width=200, 
                font=ctk.CTkFont("Roboto", 12)
            )
            entry.grid(row=idx, column=1, padx=10, pady=5)
            self.entries[key] = entry
        
        # Categorical inputs
        ctk.CTkLabel(
            input_frame, 
            text="Loan Grade:", 
            font=ctk.CTkFont("Roboto", 12)
        ).grid(row=4, column=0, padx=10, pady=5, sticky="e")
        self.grade_var = ctk.StringVar()
        grades = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
        ctk.CTkComboBox(
            input_frame, 
            variable=self.grade_var, 
            values=grades, 
            width=200, 
            font=ctk.CTkFont("Roboto", 12),
            state="readonly"
        ).grid(row=4, column=1, padx=10, pady=5)
        
        ctk.CTkLabel(
            input_frame, 
            text="Loan Term (months):", 
            font=ctk.CTkFont("Roboto", 12)
        ).grid(row=5, column=0, padx=10, pady=5, sticky="e")
        self.term_var = ctk.StringVar()
        terms = [' 36 months', ' 60 months']
        ctk.CTkComboBox(
            input_frame, 
            variable=self.term_var, 
            values=terms, 
            width=200, 
            font=ctk.CTkFont("Roboto", 12),
            state="readonly"
        ).grid(row=5, column=1, padx=10, pady=5)
        
        # Model selection
        ctk.CTkLabel(
            input_frame, 
            text="Select Model:", 
            font=ctk.CTkFont("Roboto", 12)
        ).grid(row=6, column=0, padx=10, pady=5, sticky="e")
        self.model_var = ctk.StringVar(value="Random Forest")
        ctk.CTkComboBox(
            input_frame, 
            variable=self.model_var, 
            values=list(self.models.keys()), 
            width=200, 
            font=ctk.CTkFont("Roboto", 12),
            state="readonly"
        ).grid(row=6, column=1, padx=10, pady=5)
        
        # Button frame
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(pady=10)
        
        ctk.CTkButton(
            button_frame, 
            text="Predict", 
            command=self.predict,
            font=ctk.CTkFont("Roboto", 14, weight="bold"),
            width=150
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            button_frame, 
            text="Load Example", 
            command=self.load_example,
            font=ctk.CTkFont("Roboto", 14),
            width=150
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            button_frame, 
            text="Clear Inputs", 
            command=self.clear_inputs,
            font=ctk.CTkFont("Roboto", 14),
            width=150
        ).pack(side="left", padx=5)
        
        # Output area
        self.output_text = ctk.CTkTextbox(
            main_frame, 
            height=100, 
            width=600, 
            font=ctk.CTkFont("Roboto", 12),
            corner_radius=10
        )
        self.output_text.pack(pady=10, padx=10, fill="x")
        self.output_text.insert("0.0", "Prediction results will appear here...")
        self.output_text.configure(state="disabled")
        
    def toggle_theme(self):
        current_mode = ctk.get_appearance_mode()
        new_mode = "light" if current_mode == "Dark" else "dark"
        ctk.set_appearance_mode(new_mode)
        
    def clear_inputs(self):
        for entry in self.entries.values():
            entry.delete(0, ctk.END)
        self.grade_var.set("")
        self.term_var.set("")
        self.model_var.set("Random Forest")
        self.output_text.configure(state="normal")
        self.output_text.delete("0.0", ctk.END)
        self.output_text.insert("0.0", "Prediction results will appear here...")
        self.output_text.configure(state="disabled")
        
    def load_example(self):
        example_data = {
            'loan_amnt': '10000',
            'int_rate': '10.99',
            'annual_inc': '50000',
            'dti': '15.0',
            'grade': 'C',
            'term': ' 36 months',
            'model': 'Random Forest'
        }
        
        for key, entry in self.entries.items():
            entry.delete(0, ctk.END)
            entry.insert(0, example_data[key])
        
        self.grade_var.set(example_data['grade'])
        self.term_var.set(example_data['term'])
        self.model_var.set(example_data['model'])
        
        self.output_text.configure(state="normal")
        self.output_text.delete("0.0", ctk.END)
        self.output_text.insert("0.0", "Example data loaded. Click 'Predict' to see the result.\n")
        self.output_text.configure(state="disabled")
    
    def preprocess_input(self, input_data):
        df = pd.DataFrame([self.imputation_values], columns=self.feature_names)
        for key in self.gui_features:
            df[key] = input_data[key]
        
        df['grade'] = self.le_grade.transform([df['grade'][0]])[0]
        df['term'] = self.le_term.transform([df['term'][0]])[0]
        
        numerical_cols = [col for col in self.feature_names if col in self.scaler.feature_names_in_]
        df[numerical_cols] = self.scaler.transform(df[numerical_cols])
        
        return df
    
    def predict(self):
        try:
            input_data = {}
            for key, entry in self.entries.items():
                value = entry.get().strip()
                if not value:
                    raise ValueError(f"{key} cannot be empty!")
                input_data[key] = float(value)
            
            grade = self.grade_var.get()
            term = self.term_var.get()
            if not grade or not term:
                raise ValueError("Please select a loan grade and term!")
            input_data['grade'] = grade
            input_data['term'] = term
            
            input_df = self.preprocess_input(input_data)
            
            model_name = self.model_var.get()
            model = self.models[model_name]
            
            prediction = model.predict(input_df)[0]
            probability = model.predict_proba(input_df)[0][1]
            
            result = "GOOD" if prediction == 0 else "BAD"
            self.output_text.configure(state="normal")
            self.output_text.delete("0.0", ctk.END)
            self.output_text.insert("0.0", f"Model: {model_name}\n")
            self.output_text.insert("end", f"Prediction: {result}\n")
            self.output_text.insert("end", f"Probability of BAD Credit Risk: {probability*100:.2f}%\n")
            self.output_text.configure(state="disabled")
            
        except ValueError as e:
            messagebox.showerror("Input Error", str(e))
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")

if __name__ == "__main__":
    root = ctk.CTk()
    app = CreditRiskGUI(root)
    root.mainloop()